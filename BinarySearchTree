package bst;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

class Node implements Comparable<Node> {
	public int data;
	public Node left;
	public Node right;

	public Node(int data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}

	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		return 0;
	}
}

public class BinarySearchTree {

	public static void main(String[] args) {
		BinarySearchTree bst = new BinarySearchTree();
		Node root = null;
		root = bst.insert(root, 10);
		root = bst.insert(root, 9);
		root = bst.insert(root, 20);
		root = bst.insert(root, 24);
		root = bst.insert(root, 18);
		root = bst.insert(root, 1);
		root = bst.insert(root, 4);
		root = bst.insert(root, 400);
		root = bst.insert(root, 402);
		bst.display(root);
		int min = bst.min(root);
		System.out.println("----Min :" + min);
		int max = bst.max(root);
		System.out.println("----Max :" + max);
		int height = bst.height(root);
		System.out.println("----Height :" + height);
		System.out.println("----level order :" + height);
		bst.levelOrder(root);
		System.out.println();
		System.out.println("pre order view");
		bst.preOrder(root);
		System.out.println();
		System.out.println("post order view");
		bst.postOrder(root);
		System.out.println();
		System.out.println("in order view");
		bst.inOrder(root);
		System.out.println("");
		int levelSum = bst.MaxLevelSum(root);
		System.out.println("Maximum level sum : " + levelSum);

	}

	public Node insert(Node root, int data) {
		if (root == null) {
			root = new Node(data);
		} else if (data <= root.data) {
			root.left = insert(root.left, data);
		} else if (data >= root.data) {
			root.right = insert(root.right, data);
		}
		return root;
	}

	public void display(Node root) {
		if (root == null)
			return;
		System.out.println("----" + root.data + "---");
		display(root.left);
		display(root.right);

	}

	public int min(Node root) {
		if (root == null) {
			return -1;
		}
		if (root.left == null) {
			return root.data;
		}
		return min(root.left);
	}

	public int max(Node root) {
		if (root == null) {
			return -1;
		}
		if (root.right == null) {
			return root.data;
		}

		return max(root.right);
	}

	public int height(Node root) {
		if (root == null) {
			return -1;
		}
		int lh = height(root.left);
		int rh = height(root.right);
		return Math.max(lh, rh) + 1;
	}

	public void levelOrder(Node root) {
		Queue<Node> q = new LinkedList<Node>();
		if (root == null)
			return;
		q.add(root);
		while (!q.isEmpty()) {
			Node current = q.poll();
			System.out.print(current.data + " -> ");
			if (current.left != null)
				q.add(current.left);
			if (current.right != null)
				q.add(current.right);
		}
	}

	public void preOrder(Node root) {
		if (root == null)
			return;

		System.out.print(root.data + " -> ");
		preOrder(root.left);
		preOrder(root.right);
	}

	public void postOrder(Node root) {
		if (root == null)
			return;

		preOrder(root.left);
		preOrder(root.right);
		System.out.print(root.data + " -> ");
	}

	public void inOrder(Node root) {
		if (root == null)
			return;
		preOrder(root.left);
		System.out.print(root.data + " -> ");
		preOrder(root.right);
	}

	public int MaxLevelSum(Node root) {
		  if(root == null)
	           return 0;
	           int result = root.data;
	          
	        Queue<Node> queue = new LinkedList<Node>();
	        queue.add(root);
	        while(!queue.isEmpty()){
	            int count  = queue.size();
	            int sum = 0;
	            while(count-- > 0 ){
	            Node current = queue.poll();
	            sum= sum+current.data;

	            if(current.left != null){
	                queue.add(current.left);
	            }
	            if(current.right != null){
	                queue.add(current.right);
	            }

	            }
	            result = Math.max(sum,result);
	           
	        }
	        return result;
	}

}
